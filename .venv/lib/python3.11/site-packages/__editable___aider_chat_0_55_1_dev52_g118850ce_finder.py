from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'aider': '/home/martin-m/research/aider-dev/aider'}
NAMESPACES: dict[str, list[str]] = {'aider.website': ['/home/martin-m/research/aider-dev/aider/website'], 'aider.queries': ['/home/martin-m/research/aider-dev/aider/queries'], 'aider.website.assets': ['/home/martin-m/research/aider-dev/aider/website/assets'], 'aider.website._layouts': ['/home/martin-m/research/aider-dev/aider/website/_layouts'], 'aider.website._data': ['/home/martin-m/research/aider-dev/aider/website/_data'], 'aider.website._posts': ['/home/martin-m/research/aider-dev/aider/website/_posts'], 'aider.website.docs': ['/home/martin-m/research/aider-dev/aider/website/docs'], 'aider.website.blog': ['/home/martin-m/research/aider-dev/aider/website/blog'], 'aider.website.share': ['/home/martin-m/research/aider-dev/aider/website/share'], 'aider.website._sass': ['/home/martin-m/research/aider-dev/aider/website/_sass'], 'aider.website.examples': ['/home/martin-m/research/aider-dev/aider/website/examples'], 'aider.website._includes': ['/home/martin-m/research/aider-dev/aider/website/_includes'], 'aider.website.assets.icons': ['/home/martin-m/research/aider-dev/aider/website/assets/icons'], 'aider.website.docs.install': ['/home/martin-m/research/aider-dev/aider/website/docs/install'], 'aider.website.docs.config': ['/home/martin-m/research/aider-dev/aider/website/docs/config'], 'aider.website.docs.troubleshooting': ['/home/martin-m/research/aider-dev/aider/website/docs/troubleshooting'], 'aider.website.docs.usage': ['/home/martin-m/research/aider-dev/aider/website/docs/usage'], 'aider.website.docs.leaderboards': ['/home/martin-m/research/aider-dev/aider/website/docs/leaderboards'], 'aider.website.docs.llms': ['/home/martin-m/research/aider-dev/aider/website/docs/llms'], 'aider.website._sass.custom': ['/home/martin-m/research/aider-dev/aider/website/_sass/custom']}
PATH_PLACEHOLDER = '__editable__.aider_chat-0.55.1.dev52+g118850ce.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
