name: Exe Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+_cio'
    branches:
      - 'commandio'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get Docker version
      id: docker-version
      run: |
        echo "version=$(python scripts/docker_version.py)" >> $GITHUB_OUTPUT

    - name: Check if Docker image exists
      id: check-image
      run: |
        if docker manifest inspect ghcr.io/${{ github.repository }}/builder:${{ steps.docker-version.outputs.version }} > /dev/null 2>&1; then
          echo "image_exists=true" >> $GITHUB_OUTPUT
        else
          echo "image_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      if: steps.check-image.outputs.image_exists != 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ runner.os == 'Windows' && 'scripts/Dockerfile.windows.cio' || 'scripts/Dockerfile.cio' }}
        push: true
        tags: ghcr.io/${{ github.repository }}/builder:${{ steps.docker-version.outputs.version }}-${{ runner.os }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Release
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          DOCKERFILE="scripts/Dockerfile.windows.cio"
        else
          DOCKERFILE="scripts/Dockerfile.cio"
        fi
        docker run --rm \
          -v ${{ github.workspace }}:/repo \
          -v ${{ github.workspace }}/dist:/repo/dist \
          ghcr.io/${{ github.repository }}/builder:${{ steps.docker-version.outputs.version }}-${{ runner.os }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ runner.os }}
        path: dist/*

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        generate_release_notes: true
